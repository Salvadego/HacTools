#!/usr/bin/env bash

VERSION="2.0.0"
PROG_NAME="haccli"
CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/$PROG_NAME"
CLIENTS_DIR="$CONFIG_DIR/clients"

mkdir -p "$CLIENTS_DIR"

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
# YELLOW='\033[0;33m'
CYAN='\033[0;36m'
# MAGENTA='\033[0;35m'
BOLD='\033[1m'
NC='\033[0m'

_haccli_print_header() {
    echo -e "${BOLD}${BLUE}===== $1 =====${NC}"
}

_haccli_print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

_haccli_print_error() {
    echo -e "${RED}✗ $1${NC}" >&2
}

_haccli_print_info() {
    echo -e "${CYAN}ℹ $1${NC}"
}

_haccli_print_version() {
    echo -e "${PROG_NAME} version ${VERSION}"
}

_haccli_print_usage() {
    echo -e "${BOLD}${PROG_NAME}${NC} - Hybris Administration Console CLI Tool"
    echo

    echo -e "${BOLD}USAGE:${NC}"
    echo -e "  ${PROG_NAME} [COMMAND]"
    echo

    echo -e "${BOLD}COMMANDS:${NC}"
    cat << EOF
    select        Select and activate a client configuration
    new           Create a new client configuration
    wizard        Interactive configuration wizard
    list          List all available client configurations
    remove        Remove a client configuration
    edit          Edit a client configuration
    current       Show current active configuration
    help          Show this help message
    version       Show version information
EOF
}

_haccli_has_command() {
    command -v "$1" &> /dev/null
    return $?
}

_haccli_check_dependencies() {
    local has_fzf=false
    local has_bat=false

    if _haccli_has_command fzf; then
        has_fzf=true
    fi

    if _haccli_has_command bat; then
        has_bat=true
    fi

    if ! $has_fzf || ! $has_bat; then
        _haccli_print_info "Optional dependencies status:"
        $has_fzf && _haccli_print_success "fzf: installed" || _haccli_print_info "fzf: not found (using fallback)"
        $has_bat && _haccli_print_success "bat: installed" || _haccli_print_info "bat: not found (using fallback)"
    fi

    return 0
}

_haccli_select_file() {
    local dir="$1"
    local prompt="${2:-Select file:}"
    local has_fzf=false
    local has_bat=false
    local file=""

    if _haccli_has_command fzf; then
        has_fzf=true
    fi

    if _haccli_has_command bat; then
        has_bat=true
    fi

    if $has_fzf; then
        if $has_bat; then
            file=$(ls -A "$dir" 2>/dev/null | fzf --prompt="$prompt " --preview="bat $dir/{} --language=sh" 2>/dev/null)
        else
            file=$(ls -A "$dir" 2>/dev/null | fzf --prompt="$prompt " --preview="cat $dir/{}" 2>/dev/null)
        fi
    fi

    if [ -z "$file" ]; then
        echo -e "${BOLD}$prompt${NC}"
        local files=()
        while IFS= read -r fname; do
            files+=("$fname")
        done < <(ls -A "$dir" 2>/dev/null)

        if [ ${#files[@]} -eq 0 ]; then
            _haccli_print_error "No files found in $dir"
            return 1
        fi

        select fname in "${files[@]}"; do
            if [ -n "$fname" ]; then
                file="$fname"
                break
            else
                echo "Invalid selection. Please try again."
            fi
        done
    fi

    if [ -n "$file" ]; then
        echo "$file"
    else
        return 1
    fi

    echo "$file"
}

_haccli_preview_file() {
    local file="$1"

    if [ ! -f "$file" ]; then
        _haccli_print_error "File not found: $file"
        return 1
    fi

    if _haccli_has_command bat; then
        bat "$file"
    else
        cat "$file"
    fi
}

_haccli_load_client_config() {
    local client_file="$1"

    if [ ! -f "$client_file" ]; then
        _haccli_print_error "Client configuration file not found: $client_file"
        return 1
    fi

    source "$client_file"

    echo "export HACCLI_ACTIVE_CLIENT=\"$(basename "$client_file")\"" > "$CONFIG_DIR/active_client"
    echo "export HYBRIS_HAC_URL=\"$HYBRIS_HAC_URL\"" >> "$CONFIG_DIR/active_client"
    echo "export HYBRIS_USER=\"$HYBRIS_USER\"" >> "$CONFIG_DIR/active_client"
    echo "export HYBRIS_PASSWORD=\"$HYBRIS_PASSWORD\"" >> "$CONFIG_DIR/active_client"

    export HACCLI_ACTIVE_CLIENT="$(basename "$client_file")"
    export HYBRIS_HAC_URL="$HYBRIS_HAC_URL"
    export HYBRIS_USER="$HYBRIS_USER"
    export HYBRIS_PASSWORD="$HYBRIS_PASSWORD"

    _haccli_print_success "Client configuration activated: $(basename "$client_file")"
    _haccli_print_info "HAC URL: $HYBRIS_HAC_URL"
    _haccli_print_info "Username: $HYBRIS_USER"
}

haccli_select() {
    _haccli_print_header "Select Client Configuration"

    _haccli_check_dependencies

    if [ -z "$(ls -A "$CLIENTS_DIR" 2>/dev/null)" ]; then
        _haccli_print_error "No client configurations found."
        _haccli_print_info "Use 'haccli new' to create a new client configuration."
        return 1
    fi

    local file
    file=$(_haccli_select_file "$CLIENTS_DIR" "Select client:")

    if [ -z "$file" ]; then
        _haccli_print_info "No client selected."
        return 0
    fi

    _haccli_load_client_config "$CLIENTS_DIR/$file"
}

haccli_new() {
    _haccli_print_header "Create New Client Configuration"

    _haccli_check_dependencies

    local client hac_url hac_username hac_pass

    echo -e "${BOLD}Client name:${NC} "
    read -e client

    if [ -z "$client" ]; then
        _haccli_print_error "Client name cannot be empty."
        return 1
    fi

    if [ -f "$CLIENTS_DIR/$client" ]; then
        _haccli_print_error "Client '$client' already exists."
        _haccli_print_info "Use 'haccli edit $client' to modify the existing configuration."
        return 1
    fi

    echo -e "${BOLD}HAC URL:${NC} "
    read -e hac_url

    echo -e "${BOLD}Username:${NC} "
    read -e hac_username

    echo -e "${BOLD}Password:${NC} "
    read -es hac_pass
    echo

    cat << EOF > "$CLIENTS_DIR/$client"
    export HYBRIS_HAC_URL="$hac_url"
    export HYBRIS_USER="$hac_username"
    export HYBRIS_PASSWORD="$hac_pass"
    EOF

    chmod +x "$CLIENTS_DIR/$client"

    _haccli_print_success "Client configuration created: $client"

    echo -e "${BOLD}Activate this client now? [y/N]${NC} "
    read -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        _haccli_load_client_config "$CLIENTS_DIR/$client"
    fi
}

haccli_list() {
    _haccli_print_header "Available Client Configurations"

    if [ -z "$(ls -A "$CLIENTS_DIR" 2>/dev/null)" ]; then
        _haccli_print_info "No client configurations found."
        return 0
    fi

    local active_client=""
    if [ -f "$CONFIG_DIR/active_client" ]; then
        active_client=$(grep "HACCLI_ACTIVE_CLIENT" "$CONFIG_DIR/active_client" | cut -d'"' -f2)
    fi

    echo -e "${BOLD}CLIENTS:${NC}"
    for client in "$CLIENTS_DIR"/*; do
        client_name=$(basename "$client")
        if [ "$client_name" = "$active_client" ]; then
            echo -e "  ${GREEN}${client_name} (active)${NC}"
        else
            echo "  $client_name"
        fi
    done
}

haccli_remove() {
    _haccli_print_header "Remove Client Configuration"

    _haccli_check_dependencies

    if [ -z "$(ls -A "$CLIENTS_DIR" 2>/dev/null)" ]; then
        _haccli_print_error "No client configurations found."
        return 1
    fi

    local file
    file=$(_haccli_select_file "$CLIENTS_DIR" "Select client to remove:")

    if [ -z "$file" ]; then
        _haccli_print_info "No client selected."
        return 0
    fi

    echo -e "${BOLD}${RED}Are you sure you want to remove '$file'? [y/N]${NC} "
    read -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -f "$CLIENTS_DIR/$file"
        _haccli_print_success "Client configuration removed: $file"

        local active_client=""
        if [ -f "$CONFIG_DIR/active_client" ]; then
            active_client=$(grep "HACCLI_ACTIVE_CLIENT" "$CONFIG_DIR/active_client" | cut -d'"' -f2)
            if [ "$active_client" = "$file" ]; then
                rm -f "$CONFIG_DIR/active_client"
                _haccli_print_info "Active client configuration was cleared."
                unset HYBRIS_HAC_URL HYBRIS_USER HYBRIS_PASSWORD HACCLI_ACTIVE_CLIENT
            fi
        fi
    else
        _haccli_print_info "Operation cancelled."
    fi
}

haccli_edit() {
    _haccli_print_header "Edit Client Configuration"

    _haccli_check_dependencies

    if [ -z "$(ls -A "$CLIENTS_DIR" 2>/dev/null)" ]; then
        _haccli_print_error "No client configurations found."
        return 1
    fi

    local file client_file
    if [ -n "$1" ]; then
        file="$1"
        client_file="$CLIENTS_DIR/$file"
        if [ ! -f "$client_file" ]; then
            _haccli_print_error "Client '$file' not found."
            return 1
        fi
    else
        file=$(_haccli_select_file "$CLIENTS_DIR" "Select client to edit:")
        if [ -z "$file" ]; then
            _haccli_print_info "No client selected."
            return 0
        fi
        client_file="$CLIENTS_DIR/$file"
    fi

    local current_url=$(grep "HYBRIS_HAC_URL" "$client_file" | cut -d'"' -f2)
    local current_user=$(grep "HYBRIS_USER" "$client_file" | cut -d'"' -f2)
    local current_pass=$(grep "HYBRIS_PASSWORD" "$client_file" | cut -d'"' -f2)

    echo -e "${BOLD}Editing client:${NC} $file"

    echo -e "${BOLD}HAC URL${NC} [${current_url}]: "
    read -e hac_url
    hac_url=${hac_url:-$current_url}

    echo -e "${BOLD}Username${NC} [${current_user}]: "
    read -e hac_username
    hac_username=${hac_username:-$current_user}

    echo -e "${BOLD}Password${NC} [leave empty to keep current]: "
    read -es hac_pass
    echo
    hac_pass=${hac_pass:-$current_pass}

    cat << EOF > "$client_file"
    export HYBRIS_HAC_URL="$hac_url"
    export HYBRIS_USER="$hac_username"
    export HYBRIS_PASSWORD="$hac_pass"
    EOF

    chmod +x "$client_file"

    _haccli_print_success "Client configuration updated: $file"

    echo -e "${BOLD}Activate this client now? [y/N]${NC} "
    read -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        _haccli_load_client_config "$client_file"
    fi
}

haccli_current() {
    _haccli_print_header "Current Active Configuration"

    if [ ! -f "$CONFIG_DIR/active_client" ]; then
        _haccli_print_info "No active client configuration."
        return 0
    fi

    local active_client=$(grep "HACCLI_ACTIVE_CLIENT" "$CONFIG_DIR/active_client" | cut -d'"' -f2)
    local hac_url=$(grep "HYBRIS_HAC_URL" "$CONFIG_DIR/active_client" | cut -d'"' -f2)
    local username=$(grep "HYBRIS_USER" "$CONFIG_DIR/active_client" | cut -d'"' -f2)

    echo -e "${BOLD}Active client:${NC} $active_client"
    echo -e "${BOLD}HAC URL:${NC} $hac_url"
    echo -e "${BOLD}Username:${NC} $username"

    if [ -z "${HYBRIS_HAC_URL}" ] || [ -z "${HYBRIS_USER}" ] || [ -z "${HYBRIS_PASSWORD}" ] || [ -z "${HACCLI_ACTIVE_CLIENT}" ]; then
        echo
        _haccli_print_error "Warning: Environment variables are not set in your current shell!"
        _haccli_print_info "Run: haccli select to choose a client configuration"
    else
        if [ "${HYBRIS_HAC_URL}" != "${hac_url}" ] || 
            [ "${HYBRIS_USER}" != "${username}" ] || 
            [ "${HACCLI_ACTIVE_CLIENT}" != "${active_client}" ]; then
                    echo
                    _haccli_print_error "Warning: Environment variables don't match the saved configuration!"
                    _haccli_print_info "Run: haccli select to update your environment"
                else
                    _haccli_print_success "Environment variables are correctly set in your current shell."
        fi
    fi
}

haccli_wizard() {
    _haccli_print_header "Configuration Wizard"

    _haccli_check_dependencies

    local existing_clients=0
    if [ -n "$(ls -A "$CLIENTS_DIR" 2>/dev/null)" ]; then
        existing_clients=1
    fi

    if [ $existing_clients -eq 1 ]; then
        echo "1) Select existing client"
        echo "2) Create new client"
        echo "3) Edit existing client"
        echo "4) Remove client"
        echo "5) Exit wizard"
    else
        echo "1) Create new client"
        echo "2) Exit wizard"
    fi

    echo -n "Please select an option: "
    local choice
    read choice

    if [ $existing_clients -eq 1 ]; then
        case $choice in
            1) haccli_select ;;
            2) haccli_new ;;
            3) haccli_edit ;;
            4) haccli_remove ;;
            5) _haccli_print_info "Exiting wizard." ;;
            *) _haccli_print_error "Invalid option. Please try again." ;;
        esac
    else
        case $choice in
            1) haccli_new ;;
            2) _haccli_print_info "Exiting wizard." ;;
            *) _haccli_print_error "Invalid option. Please try again." ;;
        esac
    fi
}

haccli() {
    if [ $# -eq 0 ]; then
        haccli_wizard
        return
    fi

    local cmd="$1"
    shift || true

    case "$cmd" in
        select|s)
            haccli_select "$@"
            ;;
        new|n)
            haccli_new "$@"
            ;;
        wizard|w)
            haccli_wizard "$@"
            ;;
        list|ls|l)
            haccli_list "$@"
            ;;
        remove|rm|r)
            haccli_remove "$@"
            ;;
        edit|e)
            haccli_edit "$@"
            ;;
        current|c)
            haccli_current "$@"
            ;;
        help|h|--help|-h)
            _haccli_print_usage
            ;;
        version|v|--version|-v)
            _haccli_print_version
            ;;
        "")
            haccli_wizard
            ;;
        *)
            _haccli_print_error "Unknown command: $cmd"
            _haccli_print_usage
            return 1
            ;;
    esac
}

if [ -f "$CONFIG_DIR/active_client" ]; then
    . "$CONFIG_DIR/active_client"
fi
